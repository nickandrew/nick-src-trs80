;Unoffset/asm: Remove Lm-offset induced faults
;from command files...
; Version 1.1 on 23-Dec-84.
;
*GET	DOSCALLS
;
	ORG	5200H
STACK	DEFS	80H
;
UNOFF	LD	SP,UNOFF
	PUSH	HL
	CALL	SIGNON
	POP	HL
	PUSH	HL
	CALL	OPEN1	;Insert Source & open file/cmd.
	CALL	GETFIL	;Read in file.
	CALL	GETADD	;Get Eof etc...
	CALL	CLOSFL
	LD	DE,(STAPCH)
	LD	HL,DUMMY	;Dummy end-file.
	LD	BC,5
	LDIR
	CALL	OFFSET
	POP	HL
	CALL	OPEN2	;Insert Dest. & open file/ori.
	CALL	WRITFL	;Write out file.
	CALL	CLOSFL
	JP	DOS_NOERROR
DUMMY	DEFW	0202H	;Meaning exec addr. follows.
EXECAD	DEFW	0000H	;Original exec addr.
	DEFB	0
DEFEX1	DEFM	'CMD'
DEFEX2	DEFM	'ORI'
STAPCH	DEFW	0
LMORIG	DEFW	0
ORORIG	DEFW	0
EOF	DEFW	0
SMESS	DEFM	'Insert Source disk, hit <C/R>',0DH
DMESS	DEFM	'Insert Destination disk, hit <C/R>',0DH
SGMESS	DEFM	'Unoffset/Cmd Ver 1.1 (23-12-84)',0AH
	DEFM	'Removes lmoffset from files:',0AH
	DEFM	'ONLY for lmoffset damaged files',0AH
	DEFM	'Use OFFSET instead!',0AH
	DEFM	'Copyright (C) 1984, Nick Andrew Z.M.S'
	DEFB	0AH,0DH
SIGNON	LD	HL,SGMESS
	CALL	MESS_DO
	RET
OPEN1	PUSH	HL
	LD	HL,SMESS
	CALL	MESS_DO
	CALL	WAITCR
	POP	HL
	LD	DE,FCB
	CALL	DOS_EXTRACT
	LD	HL,DEFEX1
	LD	DE,FCB
	CALL	DOS_EXTEND
	LD	HL,BUFFER
	LD	DE,FCB
	LD	B,0
	CALL	DOS_OPEN_EX
	JP	NZ,DOS_ERROR
	RET
GETFIL	LD	HL,BUFF2
GETV01	CALL	READ1
	CP	02H
	JR	Z,EXECBK
	CP	01H
	JR	Z,LDBLK
;Assume skip block...
	CALL	READ1
	LD	B,A
GETV02	CALL	READ1
	DJNZ	GETV02
	JR	GETV01
LDBLK	LD	(HL),A
	INC	HL
	CALL	READ1
	LD	(HL),A
	INC	HL
	DEC	A
	DEC	A
	LD	B,A
	CALL	READ2
	CALL	POKEDE
GETV03	CALL	READ1
	LD	(HL),A
	INC	HL
	DJNZ	GETV03
	JR	GETV01
EXECBK	LD	(HL),A
	INC	HL
	CALL	READ1
	LD	(HL),A
	INC	HL
	CALL	READ2
	CALL	POKEDE
	DEC	HL
	LD	(EOF),HL
	RET
GETADD	LD	HL,(EOF)
	LD	DE,142H	;13eh
	OR	A
	SBC	HL,DE
	LD	(STAPCH),HL
	LD	DE,5
	CALL	BRBA
	LD	(EXECAD),DE
	LD	DE,0DH
	CALL	BRBA
	LD	(ORORIG),DE
	LD	DE,10H
	CALL	BRBA
	LD	(LMORIG),DE
	RET
BRBA	LD	HL,(EOF)
	OR	A
	SBC	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	RET
CLOSFL	LD	DE,FCB
	CALL	DOS_CLOSE
	JP	NZ,DOS_ERROR
	RET
OPEN2	PUSH	HL
	LD	HL,DMESS
	CALL	MESS_DO
	CALL	WAITCR
	POP	HL
	LD	DE,FCB
	CALL	DOS_EXTRACT
	LD	DE,FCB
	LD	HL,DEFEX2
	CALL	DOS_EXTEND
	LD	DE,FCB
	LD	HL,BUFFER
	LD	B,0
	CALL	DOS_OPEN_NEW
	JP	NZ,DOS_ERROR
	RET
READ1	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	DE,FCB
	CALL	$GET
	JP	NZ,DOS_ERROR
	POP	BC
	POP	DE
	POP	HL
	RET
READ2	CALL	READ1
	LD	E,A
	CALL	READ1
	LD	D,A
	RET
POKEDE	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	RET
WAITCR	CALL	0049H
	CP	0DH
	JR	NZ,WAITCR
	RET
OFFSET	LD	HL,BUFF2
OFFV01	LD	A,(HL)
	CP	2
	RET	Z
	INC	HL
	LD	B,(HL)
	DEC	B
	DEC	B
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	PUSH	HL
	LD	HL,(LMORIG)
	OR	A
	PUSH	DE
	EX	DE,HL
	SBC	HL,DE
	POP	DE
	POP	HL
	JR	C,OFFV02
	PUSH	HL
	LD	HL,(ORORIG)
	ADD	HL,DE
	LD	DE,(LMORIG)
	OR	A
	SBC	HL,DE
	EX	DE,HL
	POP	HL
	DEC	HL
	LD	(HL),D
	DEC	HL
	LD	(HL),E
	INC	HL
	INC	HL
OFFV02	INC	HL
	DJNZ	OFFV02
	JR	OFFV01
WRITFL	LD	HL,BUFF2
WRIV01	LD	A,(HL)
	INC	HL
	CP	2
	JR	NZ,NOTTWO
	CALL	WRITE1
	LD	A,(HL)
	INC	HL
	CALL	WRITE1
	CALL	WRITE2
	RET
NOTTWO	CALL	WRITE1
	LD	A,(HL)
	INC	HL
	LD	B,A
	DEC	B
	DEC	B
	CALL	WRITE1
	CALL	WRITE2
NOTV01	LD	A,(HL)
	INC	HL
	CALL	WRITE1
	DJNZ	NOTV01
	JR	WRIV01
WRITE2	LD	A,(HL)
	INC	HL
	CALL	WRITE1
	LD	A,(HL)
	INC	HL
	CALL	WRITE1
	RET
WRITE1	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	DE,FCB
	CALL	$PUT
	JP	NZ,DOS_ERROR
	POP	HL
	POP	DE
	POP	BC
	RET
;
FCB	DEFS	32
BUFFER	DEFS	256
	DC	64,0
BUFF2	DEFW	0
	DEFW	0
;
	END	UNOFF
